#!/usr/bin/env ruby

require 'methadone'
require 'nokogiri'
require File.expand_path(File.join(File.dirname(__FILE__), '../lib/cocoadex'))

include Methadone::Main
include Methadone::CLILogging
include Cocoadex

logger.error_level = Logger::ERROR

main do |query|

  logger.error_level = Logger::DEBUG if options[:verbose]
  if options[:width] and width = options[:width].first.to_i
    Cocoadex.width = width
  end
  if options[:configure]
    DocSetHelper.search_and_index
  elsif options[:'generate-tags']
    CompletionHelper.generate_tags!
  elsif options[:'load-docset']
    paths = options[:'load-docset'].map do |p|
      File.expand_path(p)
    end.uniq
    DocSetHelper.search_and_index(paths)
  elsif query
    if Tokenizer.loaded?
      Cocoadex.search(query, options[:first])
    else
      puts "No DocSets loaded. Run `cocodex --configure` to search for existing DocSets."
    end
  else
    help_now! "No options or query specified"
  end
end

version Cocoadex::VERSION
description 'A Class Reference Utility for Cocoa APIs'

arg :query, :optional

on("--verbose","Be verbose")

on("--generate-tags","Generate a tags file from indexed docsets and exit")

on("--configure","Index all DocSets in default locations")

on("--first","Load first result when multiple matches exist")

on("-w WIDTH","--width","Set the text width",/^(\d+)$/)

on("-d DOCSET","--load-docset","Load a DocSet into the datastore",/^(.*)$/)

# todo: support --platform, --platform-version, --format [format]

go!